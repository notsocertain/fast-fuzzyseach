# -*- coding: utf-8 -*-
"""fuzzy-clean.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PfoeLLWe0aq9zt_DCoWNX25T2kmmY20e
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

path ='/content/drive/MyDrive/fuzzy dataset/large_dataset.csv'

df=pd.read_csv(path)

df.shape

df.head()

import time

!pip install python-levenshtein

import Levenshtein  # Import Levenshtein module
# Import the Levenshtein module for calculating edit distance
from Levenshtein import ratio

# Rename the 'NXme' column to 'Name'
df = df.rename(columns={'NXme': 'Name'})

df.head()

# Concatenate data in 'NXme', 'Father Name', and 'Idno' columns and store in new column 'Combined'
df['Combined'] = df['Name'] + df['Father Name'] + df['Idno'].astype(str)

# Concatenate data with removing whitespaces
df['Combined'] = df['Name'].str.strip() + df['Father Name'].str.strip() + df['Idno'].astype(str)

df.head()

# Viewing the first item of the 'Combined' column using iloc
first_combined_item = df['Combined'].iloc[0]
print("First item of 'Combined' column:2", first_combined_item)

# Alternatively, you can use direct indexing
first_combined_item_direct = df['Combined'][0]
print("First item of 'Combined' column (direct indexing):", first_combined_item_direct)

class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False
        self.data = {'Name':None,'Father Name': None, 'Idno': None}

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word, name, father_name, idno):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True
        node.data['Name'] = name
        node.data['Father Name'] = father_name
        node.data['Idno'] = idno

    def search(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                return False, None, None
            node = node.children[char]
        return node.is_end_of_word, node.data.get('Name'), node.data.get('Father Name'), node.data.get('Idno')

    def search_fuzzy(self, query, threshold=0.8):
        results = []
        self._search_fuzzy_recursive(query, self.root, '', threshold, results)
        return results

    def _search_fuzzy_recursive(self, query, node, prefix, threshold, results):
        # Check base cases:
        if not node:  # Reached an empty node (no matching prefix so far)
            return

        if len(prefix) == len(query):  # Reached the end of the query
            # Check similarity and add exact match (if applicable)
            similarity = Levenshtein.ratio(query, prefix)
            if similarity >= threshold:
                results.append((prefix, node.data))
            return

        # Explore child nodes recursively
        for char, child_node in node.children.items():
            current_prefix = prefix + char
            self._search_fuzzy_recursive(query, child_node, current_prefix, threshold, results)

    def starts_with(self, prefix):
        node = self.root
        for char in prefix:
            if char not in node.children:
                return False
            node = node.children[char]
        return True

df=df.head(100000)

df.shape

df= df.sample(frac=1)  # Shuffle DataFrame rows

# Example usage:
trie = Trie()

# Assuming df is your DataFrame containing columns 'Name', 'Father Name', and 'Idno'
# Insert words along with their associated parent's name and ID number into the Trie
for index, row in df.iterrows():
    word = row['Combined']
    name = row['Name']
    father_name = row['Father Name']
    id_no = row['Idno']
    trie.insert(word=word, name=name, father_name=father_name, idno=id_no)
print(f"Successfully inserted {len(df)} elements into the Trie.")



#Viewing the first item of the 'Combined' column using iloc
first_combined_item = df['Combined'].iloc[0]
nameis =df['Name'].iloc[0]
print("First item of 'Combined' column:2", first_combined_item)

first_combined_item
# nameis

nameis

start_time = time.time()
# query ="^b23gbfViVjXS@?GP?L??PG0LQ0972222"
# query="@V1SPVKWFPCWRFV-JVJGRWFPCWRFV-BGLCWFWFPCWRFVXW?LJ?KGAFF?LCK?E?P0QQ0944546"
query ="VLVLBGRFVISPFVHVKRfsibskRf_ps79"
# query ="VKPGRV@IRGI?BCTGIF?RPG80"
# query ="VDPGLVIFVRSLSNCLBP?AF?SBF?PW9/340"
# query ="@B@SPVKWFPCWRFV-JVJGRWFPCWRFV-BGLCWFWFPCWRFVXW?LJ?KGAFF?LCK?E?P0QQ0944546"
# query ="VGNGIV@MEVRGBFVKGPSIK?E?RN?LBCW55-01-77-01264"
results = trie.search_fuzzy(query)

# Check if any results were found
if results:
    print("The search word was:", query)
    print("Search results:")
    for prefix, data in results:
        print(f"- {prefix} (Name: {data.get('Name')}, Father Name: {data.get('Father Name')}, Idno: {data.get('Idno')})")  # Fixed parenthesis
else:
    print(f"No results found for '{query}'.")

end_time = time.time()
execution_time = end_time - start_time
print("Execution time ", execution_time)



#Viewing the first item of the 'Combined' column using iloc
first_combined_item = df['Combined'].iloc[1]
print("First item of 'Combined' column:2", first_combined_item)

df.isnull().sum()



import time
start_time = time.time()

# search_word ="VKPGRV@IRGI?GBCTGIF?BI?"
search_word ="VKPGRV@IRGI?BCTGIF?RPG80"
exists, name, parent_name, id_no = trie.search(search_word)
if exists:
    print(f"Word '{search_word}' exists in the trie. Parent's name: {parent_name}, ID number: {id_no}")
else:
    print(f"Word '{search_word}' does not exist in the trie.")
end_time = time.time()
execution_time = end_time - start_time
print(f"Execution time: {execution_time} seconds")

import time
start_time = time.time()
# Now you can search for words in the trie and retrieve the associated parent's name and ID number
# query = "@V1SPVKWFPCWRFV-JVJGRWFPCWRFV-BGLCWFWFPCWRFVXW?LJ?KGAFF?LCK?E?P0QQ0944546"
query = "@V1SPVKWFPCWRFV-JVJGRWFPCWRFV-BGLCWFWFPCWRFVXW?LJ?KGAFF?LCK?E?P0QQ0944546"

# ... rest of your code

exists, name, parent_name, id_no = trie.search(query)

# ... rest of the code

if exists:
    print(f"Word '{search_word}' exists in the trie. Parent's name: {parent_name}, ID number: {id_no}")
else:
    print(f"Word '{search_word}' does not exist in the trie.")
end_time = time.time()
execution_time = end_time - start_time
print(f"Execution time: {execution_time} seconds")

